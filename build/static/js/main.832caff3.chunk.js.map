{"version":3,"sources":["services/ItemService.js","components/Item.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","then","response","data","item","post","prop","id","patch","Item","reference","description","vr_unit","Notification","msg","classStyle","className","App","useState","currency","discount","modifyItem","items","setItems","notification","setNotification","handleChange","e","target","name","value","useEffect","ItemService","Fragment","onSubmit","preventDefault","updateItem","find","i","map","setTimeout","catch","err","finally","concat","type","onChange","min","step","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.832caff3.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst BASE_URL = '/api/items'\n\nconst getAll = () => {\n    return axios\n            .get(BASE_URL)\n            .then(response => response.data)\n}\n\nconst getItem = (id) => {\n    return axios\n            .get(`${BASE_URL}/${id}`)\n            .then(response => response.data)\n}\n\nconst addItem = item => {\n    return axios\n            .post(BASE_URL, item)\n            .then(response => response.data)\n}\n\nconst updateItem = (prop, id) => {\n    return axios\n            .patch(`${BASE_URL}/${id}`, prop)\n            .then(response => response.data)\n}\n\nconst deleteItem = id => {\n    return axios\n            .delete(BASE_URL, id)\n            .then(response => response.data)\n}\n\nexport default {\n    getAll,\n    getItem,\n    addItem,\n    updateItem,\n    deleteItem\n}","import React from 'react'\n\nconst Item = ({ reference, description, vr_unit }) => (\n    <div>{reference}, {description} ({vr_unit})</div>\n)\n\nexport default Item","import React from 'react'\n\nconst Notification = ({ msg, classStyle }) => {\n    if (!msg) {\n        return null\n    }\n    return <div className={classStyle}>{msg}</div>\n}\n\nexport default Notification\n","import React, { useState, useEffect } from 'react'\n\nimport ItemService from './services/ItemService'\nimport Item from './components/Item'\nimport Notification from './components/Notification'\n\nconst genBlankItem = () => {\n\treturn {\n\t\treference: \"\",\n\t\tdescription: \"\",\n\t\tcurrency: \"\",\n\t\tvr_unit: 0,\n\t\tdiscount: 0\n\t}\n}\n\nconst App = () => {\n\n\tconst [item, modifyItem] = useState(genBlankItem())\n\tconst [items, setItems] = useState([])\n\tconst [notification, setNotification] = useState({\n\t\tmsg: '',\n\t\tclassStyle: ''\n\t})\n\n\tconst handleChange = e => {\n\t\tmodifyItem({...item, [e.target.name]: e.target.value})\n\t}\n\n\tconst handleOnSubmit = e => {\n\n\t\te.preventDefault()\n\t\tlet updateItem = items.find(i => i.reference === item.reference)\n\n\t\tif (updateItem) {\n\t\t\tItemService\n\t\t\t\t.updateItem(item, updateItem.id)\n\t\t\t\t.then(item => setItems([...items.map(i => i.id === item.id ? item : i)]))\n\t\t\t\t.then(() => { \n\t\t\t\t\tsetNotification({\n\t\t\t\t\t\tmsg: 'Item added', \n\t\t\t\t\t\tclassStyle: 'success'\n\t\t\t\t\t})\n\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tsetNotification({msg: '', classStyle: ''})\n\t\t\t\t\t}, 5000)\n\t\t\t\t})\n\t\t\t\t.catch(err => setNotification({\n\t\t\t\t\tmsg: 'Error updating item',\n\t\t\t\t\tclassStyle: 'error'\n\t\t\t\t}))\n\t\t\t\t.finally(() => modifyItem(genBlankItem()))\n\t\t} else {\n\t\t\tItemService\n\t\t\t\t.addItem(item)\n\t\t\t\t.then(item => setItems(items.concat(item)))\n\t\t\t\t.then(() => { \n\t\t\t\t\tsetNotification({\n\t\t\t\t\t\tmsg: 'Item added', \n\t\t\t\t\t\tclassStyle: 'success'\n\t\t\t\t\t})\n\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tsetNotification({msg: '', classStyle: ''})\n\t\t\t\t\t}, 5000)\n\t\t\t\t})\n\t\t\t\t.finally(() => modifyItem(genBlankItem()))\n\t\t}\n\t}\n\n\tuseEffect(() => {\n\t\tItemService\n\t\t\t.getAll()\n\t\t\t.then(items => setItems(items))\n\t}, [])\n\n  \treturn (\n\t\t<React.Fragment>\n\t\t\t<Notification msg={notification.msg} classStyle={notification.classStyle} />\n\t\t\t<form onSubmit={handleOnSubmit}>\n\t\t\t\t<div>\n\t\t\t\t\t<label>Reference</label>\n\t\t\t\t\t<input \n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tname=\"reference\"\n\t\t\t\t\t\tvalue={item.reference}\n\t\t\t\t\t\tonChange={handleChange} />\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<label>Description</label>\n\t\t\t\t\t<input \n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tname=\"description\"\n\t\t\t\t\t\tvalue={item.description}\n\t\t\t\t\t\tonChange={handleChange} />\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<label>Currency</label>\n\t\t\t\t\t<select \n\t\t\t\t\t\tname=\"currency\" \n\t\t\t\t\t\tvalue={item.currency}\n\t\t\t\t\t\tonChange={handleChange}>\n\t\t\t\t\t\t<option value=\"COP\">COP</option>\n\t\t\t\t\t\t<option value=\"US\">US</option>\n\t\t\t\t\t\t<option value=\"EUR\">EUR</option>\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<label>Price</label>\n\t\t\t\t\t<input \n\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\tname=\"vr_unit\"\n\t\t\t\t\t\tmin=\"0\"\n\t\t\t\t\t\tstep=\"1\"\n\t\t\t\t\t\tvalue={item.vr_unit}\n\t\t\t\t\t\tonChange={handleChange} />\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<label>Discount</label>\n\t\t\t\t\t<input \n\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\tname=\"discount\"\n\t\t\t\t\t\tmin=\"0\"\n\t\t\t\t\t\tstep=\"1\"\n\t\t\t\t\t\tvalue={item.discount}\n\t\t\t\t\t\tonChange={handleChange} />\n\t\t\t\t</div>\n\t\t\t\t<button type=\"submit\">Save</button>\n\t\t\t</form>\n\t\t\t<h3>Items</h3>\n\t\t\t{ items.map(i => <Item key={i.id} {...i} />) }\n\t\t</React.Fragment>\n  \t)\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}